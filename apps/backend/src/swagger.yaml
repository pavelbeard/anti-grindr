openapi: "3.0.0"
info:
  title: "Anti-Grindr"
  version: "0.0.1"
  description: "An alternative to Grindr, which abuses its position on the market to suck off more money from users."

servers:
  - url: "http://localhost:5100"
    description: "Development server"

paths:
  "/api/user/create":
    post:
      summary: "Create a new user"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        201:
          description: "User created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid input data"

  "/api/user/{id}":
    get:
      summary: "Get user by ID"
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          description: "User ID"
          schema:
            type: string
            example: cZx909OsA1kaXhsaQ
      responses:
        200:
          description: "User details"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

  "/api/user/{id}/update-email":
    patch:
      summary: "Update user email"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  type: string
                  example: "newemail@example.com"
                actualPassword:
                  type: string
                  example: "password123"
      responses:
        200:
          description: "Email updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Password required / Passwords are not match"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"
        

  "/api/user/{id}/update-password":
    patch:
      summary: "Update user password"
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                actualPassword:
                  type: string
                  example: "password123"
                newPassword:
                  type: string
                  example: "newpassword123"
      responses:
        200:
          description: "Password updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Password too weak / Password required / Passwords are not match"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Unauthorized"
        403:
          description: "Forbidden"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Forbidden"
        404:
          description: "User not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User not found"

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: cZx909OsA1kaXhsaQ
        email:
          type: string
          example: "john@example.com"
        name:
          type: string
          example: "john_doe"
        age:
          type: integer
          example: 25
          constraints:
            minimum: 18
            maximum: 99
        created_at:
          type: datetime
          example: "2024-01-25T10:30:00Z"
        updated_at:
          type: datetime
          example: "2024-01-25T14:45:30+02:00"
